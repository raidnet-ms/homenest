substitutions:
  name: energy-sct013-1
  friendly_name: energy
  project_name: raidnet.energy
  project_version: 1.0.0
  comment: comment

  disable_entities: 'true' # Disabilitare in blocco entitÃ  superflue
  log_level: debug
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  api_key: !secret api_key
  ota_password: !secret ota_password

# GPIO
  status_led: D4
  gpio_board_led: D5
# Device substitutions
  update_time: never #comanda lo script quando aggiornare 5s # must be > (pin_set_delay+component_update_delay*2) * channels
  update_time_watt: 10s
  ic1Volts: "230"


packages:
# Common Remote Packages
  base: github://raidnet-ms/homenest/common/device_base.yaml@main
  chip: github://raidnet-ms/homenest/common/board/common-8266.yaml@main
  board: github://raidnet-ms/homenest/common/board/d1_mini.yaml
  diagnostic: github://raidnet-ms/homenest/common/diagnostic.yaml@main

#sistemare secondo led sulla board led rosso per api connect
#on_boot:
  #    if:
#      condition:
#        api.connected:
#      then:
#        - light.turn_on: api_state

status_led:
  pin:
    number: $status_led
    inverted: true

light:
  - platform: status_led
    entity_category: config
    id: ct_led
#    name: "Network state"
    output: ct_led_output
    restore_mode: ALWAYS_OFF    

time:
  - platform: homeassistant
    id: homeassistant_time

#.......................................
#...Below script sets up PIN A and B ...
#......then tells CT# to update.........
#.......................................
output:
  - platform: gpio
    pin: $gpio_board_led
    id: ct_led_output
  - platform: gpio
    pin: D1
    id: pinB
  - platform: gpio
    pin: D2
    id: pinA

interval:
  - interval: 15s
    then:
      - script.execute: readCTs
script:
  - id: readCTs
    then:
    # A	B  CT
    # 0	0  1
    # setup for CT1 A=0 B=0 - ct1Amps
      - output.turn_off: pinA
      - output.turn_off: pinB
      - delay: 1s
      - component.update: adc_sensor
      - delay: 50ms
      - component.update: ct1Amps
      - component.update: ct1Watts
      - delay: 450ms

sensor:
  - platform: adc
    pin: A0
    id: adc_sensor
    update_interval: ${update_time}
#    attenuation: 11db #esp32 only
    filters:
      - multiply: 3.3 # Wemos D1 mini includes external voltage divider circuitry to scale down a 3.3V input signal to the chip-internal 1.0V
      - offset: -1.65 # shift down by 3.3V/2=1.65V serve a centrare la sinusoide su 0 (altrimenti legge tutta positiva).

  - platform: ct_clamp
    sensor: adc_sensor
    device_class: current
    name: ct1Amps
    id: ct1Amps
    unit_of_measurement: A
    accuracy_decimals: 2
#    sample_duration: 200ms # default 200m
    update_interval: ${update_time}
#          if (x < 0.001) return 0.0;                           // Ignora valori molto bassi 
    filters:
      - lambda: |-

          return clamp(round(x * 100.0) / 100.0, 0.0, 100.0);  // Arrotonda a 2 decimali e limita a 100 A
      - delta: 0.001  # ignora piccole variazioni, riduce aggiornamenti inutili
      - exponential_moving_average:
         alpha: 0.3
         send_every: 3
      - calibrate_linear:
          # Measured value of 0 maps to 0A
          - 0 -> 0
          - 0.74 -> 0.77
          # Known load: 5.706A
          # Raw AC Value in logs: 0.011A 
      #    - 0.011 -> 5.700
      - multiply: 100

# Watts
  - platform: template
    name: CT1 Watts
    id: ct1Watts
    lambda: return id(ct1Amps).state * ${ic1Volts};
    accuracy_decimals: 0
    unit_of_measurement: W
    update_interval: ${update_time_watt}

# kWh
  - platform: total_daily_energy
    name: Total kWh
    icon: mdi:home-lightning-bolt
    power_id: ct1Watts
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh